# Import necessary libraries for AI Long Short Term Memory Model
import yfinance as yf
# Torch libraries need to be installed
#import torch 
#import torch.nm as nm 
#import torch.optim 
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

#Fetch the data from Yahoo Finance

#Define the stocks to train the model on
""" Add more stocks later.
It would be nice to train the model on 1-2k stocks across 
various sectors to build a more complete model
"""

tickers = ['AAPL', 'GOOG', 'AMZN', 'MSFT', 'TSLA', 'NVDA', 'V', 'JNJ', 'WMT', 'DIS', 'INTC', 'AMD', 'NFLX', 'CSCO', 'XOM']

#Download all the historical data for teh last 20 years for each of the stocks
data = yf.download(tickers, start='2004-01-01', end='2024-01-01', group_by='ticker' )
print(data.head()) #Check the data
print(type(data))
print(data.columns)

print(f"Flattened columns: {data.columns}")

#Flatten the MultiIndex
data.columns =['_'.join(col) for col in data.columns]

#Build moving averages

for ticker in tickers:
    data[f'{ticker}_MA5'] = data[f'{ticker}_Adj Close'].rolling(window=5).mean()
    data[f'{ticker}_MA20'] = data[f'{ticker}_Adj Close'].rolling(window=20).mean()
    data[f'{ticker}_MA50'] = data[f'{ticker}_Adj Close'].rolling(window=50).mean()


#Remove Uneccesary Rows
data.dropna
print(data.head(51))# Checl the data with 50 day MA


# Features: Adjusted Close, Volume, and Moving Averages
for ticker in tickers:
    data[f'{ticker}_return'] = data[f'{ticker}_Adj Close'].pct_change()  # daily returns
    data[f'{ticker}_Volume'] = data[f'{ticker}_Volume']  # Use Volume as a feature

# Drop any rows with NaN values generated by rolling or pct_change
data.dropna(inplace=True)

# Features and labels arrays
features = []
labels = []

# For each ticker, prepare the data
for ticker in tickers:
    ticker_data = data[[f'{ticker}_Adj Close', f'{ticker}_MA5', f'{ticker}_MA20', f'{ticker}_MA50', f'{ticker}_return', f'{ticker}_Volume']]
    
    # You want to predict next day's adjusted close price
    label = data[f'{ticker}_Adj Close'].shift(-1)
    
    # Drop rows where the shifted label is NaN
    ticker_data = ticker_data[:-1]
    label = label[:-1]

    features.append(ticker_data.values)
    labels.append(label.values)

# Convert to numpy arrays
features = np.array(features)
labels = np.array(labels)

# Reshaping the features for LSTM
# Features should be in the shape (samples, time_steps, features)
features = features.reshape(features.shape[0], features.shape[1], features.shape[2])
print("success!! Finally.......")